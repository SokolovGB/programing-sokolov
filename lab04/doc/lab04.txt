 Визначити, чи існує трикутник з заданими кутами a, b, c.

Основна частина:
- опис роботи основної функції:
 Для визначення, чи існує трикутник із заданими кутами 
a,b і c, потрібно врахувати, що сума кутів трикутника має дорівнювати 180 градусів.
1. Объявление змінних:
double a, b, c для зберігання кутів трикутника.
2. За допомогою printf та scanf запитуємо у користувача введення кутів.
3. Перевірка умови існування трикутника:
if (a + b + c == 180 && a > 0 && b > 0 && c > 0) {
Сума кутів повинна дорівнювати 180 градусів (a + b + c == 180).
Кожен кут повинен бути більшим за нуль (a > 0, b > 0, c > 0).
4. Вивід результатів:
Якщо умови існування трикутника виконуються, програма повідомляє, 
що трикутник існує. Інакше виводиться повідомлення про те, що трикутник не існує.

Код програм:
##include <stdio.h>
int main() {
    // Введення кутів a, b і c
    double a, b, c;
    printf("Введіть кут a:");
    scanf("%lf", &a);
    printf("Введіть кут b:");
    scanf("%lf", &b);
    printf("Введіть кут c:");
    scanf("%lf", &c);
    // Перевірка умови існування трикутника
    if (a + b + c == 180 && a > 0 && b > 0 && c > 0) {
        printf("Трикутник існує.\n");
    } else {
        printf("Трикутника не існує.\n");
    }
    return 0;
}
У даному коді точкою входу є функція main(). Точка входу визначає місце, звідки розпочинається виконання програми. 
Місце знаходження: Точка входу розташована на початку програми, визначається ключовим словом int main(). 
Усе, що розташоване між відкриваючою фігурною дужкою { та закриваючою }, є тілом функції main().
Одність: В стандарті мови програмування C, існує вимога наявності однієї і тільки однієї функції main() в програмі. 
Інші функції можуть бути визначені, але вони викликатимуться з main() або з інших функцій, що викликаються з main().
Призначення: Функція main() визначає вхідний пункт для виконання програми.
Коли програма запускається, виконання розпочинається саме з цієї функції.

Виконуєм зупинку посередині виконання програми за допомогою breakpoints. Приклад зміни стану програми “на льоту”
Точка зупинки 
- b 17
Встановлюємо точку зупинки, наприклад, перед перевіркою умови, 
після вводу значень кутів. Перевіряємо значення кута с командою print с та змінюємо на інше значення командою expr c
Фрагмент з отладкою:

sokolov@sokolov-VirtualBox:~/Документы/sample_project/lab04/dist$ lldb ./main
Traceback (most recent call last):
  File "<string>", line 1, in <module>
ModuleNotFoundError: No module named 'lldb.embedded_interpreter'
(lldb) target create "./main"
Current executable set to '/home/sokolov/Документы/sample_project/lab04/dist/main' (x86_64).
(lldb) b 17
Breakpoint 1: where = main`main + 111 at main.c:17:9, address = 0x00000000000011bf
(lldb) r
Process 4060 launched: '/home/sokolov/Документы/sample_project/lab04/dist/main' (x86_64)
Введіть кут a:50
Введіть кут b:60
Введіть кут c:60
Process 4060 stopped
* thread #1, name = 'main', stop reason = breakpoint 1.1
    frame #0: 0x00005555555551bf main`main at main.c:17:9
   14  	    scanf("%lf", &c);
   15  	
   16  	    // Перевірка умови існування трикутника
-> 17  	    if (a + b + c == 180 && a > 0 && b > 0 && c > 0) {
   18  	        printf("Трикутник існує.\n");
   19  	    } else {
   20  	        printf("Трикутника не існує.\n");
(lldb) print c
(double) $0 = 60
(lldb) expr c = 70
(double) $1 = 70
(lldb) c
Трикутник існує.
Process 4060 exited with status = 0 (0x00000000) 
Process 4060 resuming


Структура проекту лабораторної роботи:
└── lab04
 ├── Makefile
 ├── README.md
 ├── doc
 │  └── lab04.txt
 └── src
   └── main.c

Висновки: при виконанні лабораторної роботи буди набуті практичні навички створення програм, що розгалужуютьс на мові С, зокрема: визначати типи даних, обчислювати 
математичні вирази, використання оператора if
