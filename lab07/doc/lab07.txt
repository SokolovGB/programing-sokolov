Переробити програми, що були розроблені під час виконання лабораторних робіт з тем
“Масиви” та “Цикли” таким чином, щоб використовувалися функції для обчислення результату.
Функції повинні задовольняти основну їх причетність - уникати дублювання коду. Тому,
для демонстрації роботи, ваша програма (функція main()) повинна мати можливість викликати
розроблену функцію з різними вхідними даними.

Програма, яка може обробляти введені або згенеровані дані, використовуючи функції для обчислення
 результатів та виведення їх на екран.

1. findLastMultipleOf7:
Ця функція приймає два параметри start і end.
Обчислює та повертає останнє число в діапазоні [start, end], яке ділиться на 7 без залишку..

2. calculateRatio:
Ця функція приймає розмір масиву n і сам масив arr.
Розраховує максимальний та мінімальний елементи у масиві.
Потім обчислює відношення максимального до мінімального значення.
Виводить відповідний результат.

3.main:
Головна функція програми.
Перевіряє наявність аргументів командного рядка. Якщо аргументи відсутні, встановлює значення за умовчанням (1 та 100).
Генерує випадковим чином розмір масиву n в межах [1, 10].
Генерує випадковим чином елементи масиву arr в межах [0, 99].
Викликає функцію findLastMultipleOf7 і виводить результат.
Викликає функцію calculateRatio і виводить результат.

4. Встановлення вхідних даних через аргументи командного рядка або значення за умовчанням:
Змінні start і end встановлюються відповідно до аргументів командного рядка або значень за умовчанням.
Аргументи командного рядка передаються через argc і argv.
Якщо аргументів командного рядка немає, встановлюються значення за умовчанням.

5. Генерація розміру масиву та елементів:
srand(time(NULL)) ініціалізує генератор псевдовипадкових чисел залежно від часу.
rand() % 10 + 1 генерує випадковий розмір масиву в межах [1, 10].
rand() % 100 генерує випадкові елементи масиву в межах [0, 99].

6. Виклик функцій і вивід результатів:
Викликає функцію findLastMultipleOf7 та виводить результат.
Викликає функцію calculateRatio та виводить результат відношення максимального до мінімального елемента масиву.

7. Завершення програми:
Програма завершує виконання із кодом повернення 0.

Код програм:

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int findLastMultipleOf7(int start, int end) {
    return end - (end % 7);
}

void calculateRatio(int n, int arr[]) {
    if (n <= 0) {
        printf("Некоректний розмір масиву.\n");
        return;
    }

    int max = arr[0];
    int min = arr[0];

    for (int i = 1; i < n; i++) {
        max = (arr[i] > max) ? arr[i] : max;
        min = (arr[i] < min) ? arr[i] : min;
    }

    if (min == 0) {
        printf("Ділення на 0 неможливе.\n");
    } else {
        float ratio = (float)max / min;
        printf("Відношення максимального до мінімального: %.2f\n", ratio);
    }
}

int main(int argc, char *argv[]) {
    // Встановлення вхідних даних через аргументи командного рядка або значення за умовчанням
    int start = (argc > 1) ? atoi(argv[1]) : 1;
    int end = (argc > 2) ? atoi(argv[2]) : 100;

    // Генерація розміру масиву випадковим чином
    srand(time(NULL));
    int n = rand() % 10 + 1;

    // Генерація масиву з випадковими елементами
    int arr[n];
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 100;
    }

    // Виклик функцій для розрахунку результату
    int lastMultipleOf7 = findLastMultipleOf7(start, end);
    printf("Останнє число в діапазоні, що ділиться на 7 без залишку: %d\n", lastMultipleOf7);

    calculateRatio(n, arr);

    return 0;
}

Програма має три точкі входу.

1. main:
Це головна функція програми, яка об'єднує різні функції та визначає послідовність викликів.
Точка входу цієї функції - це початок виконання програми. У цій функції ви встановлюєте параметри через аргументи командного рядка, 
генеруєте випадковий розмір масиву та елементи масиву, а потім викликаєте інші функції для обробки та виведення результатів.
2. findLastMultipleOf7:
Це функція, яка знаходить останнє число в діапазоні, яке ділиться на 7 без залишку.
Точка входу здійснюється через виклик цієї функції з параметрами start і end в головній функції main.
Виклик виглядає так: int lastMultipleOf7 = findLastMultipleOf7(start, end);
3. calculateRatio:
Це функція, яка обчислює відношення максимального до мінімального елемента в масиві.
Точка входу здійснюється через виклик цієї функції з параметрами n (розмір масиву) і 
arr (сам масив) в головній функції main. Виклик виглядає так:
calculateRatio(n, arr);

Виконуєм зупинку посередині виконання програми за допомогою breakpoints. Приклад зміни стану програми “на льоту”

Точка зупинки 
- b 28

Встановлюємо точку зупинки, на початку цикла, щоб змінити значення праметрів масиву. 
Змінюємо згенеровані випадковим способом змінні n, max, min в масиві на інше значення командою expr.
Завершуем программу з новою умовою.

Фрагмент з отладкою:

(Current executable set to '/home/sokolov/Документы/sample_project/lab06/dist/main' (x86_64).
(lldb) b 18
Breakpoint 1: where = main`calculateRatio + 62 at main.c:18:14, address = 0x00005555555551ee
(lldb) r
Process 4884 launched: '/home/sokolov/Документы/sample_project/lab07/dist/main' (x86_64)
Process 4884 stopped
* thread #1, name = 'main', stop reason = breakpoint 1.1 2.1
    frame #0: 0x00005555555551ee main`calculateRatio(n=10, arr=0x00007fffffffdeb0) at main.c:18:14
   15  	    int max = arr[0];
   16  	    int min = arr[0];
   17  	
-> 18  	    for (int i = 1; i < n; i++) {
   19  	        max = (arr[i] > max) ? arr[i] : max;
   20  	        min = (arr[i] < min) ? arr[i] : min;
   21  	    }
(lldb) expr n =2
(int) $0 = 2
(lldb) expr max =80
(int) $1 = 80
(lldb) expr min =20
(int) $2 = 20
(lldb) c
Відношення максимального до мінімального: 4.00

Структура проекту лабораторної роботи:

└── lab07

 ├── Makefile

 ├── README.md

 ├── doc

 │  └── lab07.txt

 └── src

   └── main.c

Висновки: при виконанні лабораторної роботи були набуті практичні навички створення програм,
що використовують функції для обчислення результату з застосуванням циклічності та мacивів 


